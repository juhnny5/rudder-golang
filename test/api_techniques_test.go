/*
Rudder API

Testing TechniquesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rudder-golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/juhnny5/rudder-golang"
)

func Test_rudder-golang_TechniquesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TechniquesAPIService CreateTechnique", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.CreateTechnique(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService DeleteTechnique", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string
		var techniqueVersion string

		resp, httpRes, err := apiClient.TechniquesAPI.DeleteTechnique(context.Background(), techniqueId, techniqueVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService GetTechniqueAllVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string

		resp, httpRes, err := apiClient.TechniquesAPI.GetTechniqueAllVersion(context.Background(), techniqueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService GetTechniqueAllVersionId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string
		var techniqueVersion string

		resp, httpRes, err := apiClient.TechniquesAPI.GetTechniqueAllVersionId(context.Background(), techniqueId, techniqueVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService GetTechniquesResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string
		var techniqueVersion string

		resp, httpRes, err := apiClient.TechniquesAPI.GetTechniquesResources(context.Background(), techniqueId, techniqueVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService ListTechniqueVersionDirectives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string
		var techniqueVersion string

		resp, httpRes, err := apiClient.TechniquesAPI.ListTechniqueVersionDirectives(context.Background(), techniqueId, techniqueVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService ListTechniques", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.ListTechniques(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService ListTechniquesDirectives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string

		resp, httpRes, err := apiClient.TechniquesAPI.ListTechniquesDirectives(context.Background(), techniqueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService ListTechniquesVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.ListTechniquesVersions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService Methods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.Methods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService ReloadMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.ReloadMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService TechniqueCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.TechniqueCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService TechniqueRevisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string
		var techniqueVersion string

		resp, httpRes, err := apiClient.TechniquesAPI.TechniqueRevisions(context.Background(), techniqueId, techniqueVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService Techniques", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TechniquesAPI.Techniques(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TechniquesAPIService UpdateTechnique", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var techniqueId string
		var techniqueVersion string

		resp, httpRes, err := apiClient.TechniquesAPI.UpdateTechnique(context.Background(), techniqueId, techniqueVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
