/*
Rudder API

Testing RulesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rudder-golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/juhnny5/rudder-golang"
)

func Test_rudder-golang_RulesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RulesAPIService CreateRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RulesAPI.CreateRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService CreateRuleCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RulesAPI.CreateRuleCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRuleCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleCategoryId string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRuleCategory(context.Background(), ruleCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleCategoryDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleCategoryId string

		resp, httpRes, err := apiClient.RulesAPI.GetRuleCategoryDetails(context.Background(), ruleCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleTree", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RulesAPI.GetRuleTree(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService ListRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RulesAPI.ListRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService RuleDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.RulesAPI.RuleDetails(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRuleCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleCategoryId string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRuleCategory(context.Background(), ruleCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
