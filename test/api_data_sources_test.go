/*
Rudder API

Testing DataSourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rudder-golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/juhnny5/rudder-golang"
)

func Test_rudder-golang_DataSourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DataSourcesAPIService CreateDataSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DataSourcesAPI.CreateDataSource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService DeleteDataSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasourceId string

		resp, httpRes, err := apiClient.DataSourcesAPI.DeleteDataSource(context.Background(), datasourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService GetAllDataSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DataSourcesAPI.GetAllDataSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService GetDataSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasourceId string

		resp, httpRes, err := apiClient.DataSourcesAPI.GetDataSource(context.Background(), datasourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService ReloadAllDatasourcesAllNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DataSourcesAPI.ReloadAllDatasourcesAllNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService ReloadAllDatasourcesOneNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.DataSourcesAPI.ReloadAllDatasourcesOneNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService ReloadOneDatasourceAllNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasourceId string

		resp, httpRes, err := apiClient.DataSourcesAPI.ReloadOneDatasourceAllNodes(context.Background(), datasourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService ReloadOneDatasourceOneNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var datasourceId string

		resp, httpRes, err := apiClient.DataSourcesAPI.ReloadOneDatasourceOneNode(context.Background(), nodeId, datasourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataSourcesAPIService UpdateDataSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasourceId string

		resp, httpRes, err := apiClient.DataSourcesAPI.UpdateDataSource(context.Background(), datasourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
